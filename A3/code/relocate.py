import numpy as npimport matplotlib.pyplot as pltimport cv2import glob# termination criteriacriteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001)# prepare object points, like (0,0,0), (1,0,0), (2,0,0) ....,(6,5,0)objp = np.zeros((7*7, 3), np.float32)objp[:, :2] = np.mgrid[0:7, 0:7].T.reshape(-1, 2)# Arrays to store object points and image points from all the images.objpoints = []  # 3d point in real world spaceimgpoints = []  # 2d points in image plane.images = glob.glob('./chessboard/*.jpg')scale_size = 6rotMat = np.zeros((3, 3))camera_center = np.zeros((3, 1))mtx = np.array([[626.23949494, 0., 211.21608234], [0., 626.22136938, 162.64737962], [0., 0., 1.]])dist = np.array([[-5.82531846e-01, 2.49567823e-01, 3.59964573e-03, -1.10895344e-04, -3.18090306e-01]])i = 0f = open("date1.ply", 'w')for fname in images:    img = cv2.imread(fname)    img = cv2.resize(img, (img.shape[1]//scale_size, img.shape[0]//scale_size))    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)    # Find the chess board corners    what = ret, corners = cv2.findChessboardCorners(gray, (7, 7), None)    # If found, add object points, image points (after refining them)    if ret == True:        objpoints.append(objp)        corners2 = cv2.cornerSubPix(            gray, corners, (11, 11), (-1, -1), criteria)        imgpoints.append(corners2)        # Draw and display the corners        img = cv2.drawChessboardCorners(img, (7, 7), corners2, ret)        ret, mtx1, dist1, rvecs, tvecs = cv2.calibrateCamera(            objpoints, imgpoints, gray.shape[::-1], None, None)        imgp = imgpoints[i][:, 0]        objp = np.array(objpoints)[i]        retval, rvecs[i], tvecs[i]=cv2.solvePnP(objp, np.array(imgp), mtx, dist)        cv2.Rodrigues(np.array(rvecs[i]), rotMat)        camera_postion =np.dot(rotMat.T, - tvecs[i])        f.write(str(camera_postion[0])+" "+str(camera_postion[1])+" "+str(camera_postion[2])+"\n")        i = i + 1        cv2.waitKey(500)f.close()k = cv2.waitKey(0) & 0xffif k == 27:    cv2.destroyAllWindows()